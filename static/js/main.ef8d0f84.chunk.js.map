{"version":3,"sources":["App.js","keypad.js","output.js","serviceWorker.js","index.js"],"names":["App","props","onClick","button","calculate","reset","backspace","setState","result","state","this","eval","slice","className","Component","keypad","name","e","target","output","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4vCAKMA,I,gWAEL,aAAYC,GACX,IAAD,8KACC,mBAAMA,IA0BJC,QAAQ,SAAAC,GACK,MAATA,EAEF,EAAKC,YAEW,OAATD,EAEP,EAAKE,QAEW,MAATF,EAEP,EAAKG,YAGL,EAAKC,SAAS,CACbC,OAAO,EAAKC,MAAMD,OAAOL,KAxC9B,EAAKM,MAAM,CACVD,OAAQ,IAHV,E,+MAUCE,KAAKH,SAAS,CACbC,OAAQG,KAAKD,KAAKD,MAAMD,SAAS,O,8BAKlCE,KAAKH,SAAS,CACbC,OAAO,O,kCAKRE,KAAKH,SAAS,CACdC,OAAQE,KAAKD,MAAMD,OAAOI,MAAM,GAAG,O,+BA0BjC,OACD,kEAAKC,UAAU,OACf,mFACA,kEAAKA,UAAU,aACf,2DAAC,uCAAD,CAAQL,OAAQE,KAAKD,MAAMD,OAAQK,UAAU,gBAD7C,KAEA,2DAAC,uCAAD,CAAQX,QAASQ,KAAKR,QAASW,UAAU,sB,KAzD1BC,8CAkEHd,2B,6ECrETe,G,4KAII,IAAD,OACP,OACW,yBAAKF,UAAU,OAEf,4BAAQG,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACC,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KAED,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KAEA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KAGA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KAKA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAKd,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA3D,KAGA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,KAAMd,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA5D,MACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,KACA,4BAAQA,KAAK,IAAId,QAAS,SAAAe,GAAC,OAAG,EAAKhB,MAAMC,QAAQe,EAAEC,OAAOF,QAA1D,U,GAlCQF,cA4CNC,O,6EC5CTI,G,4KAGJ,OACW,yBAAKN,UAAU,UACd,2BAAIH,KAAKT,MAAMO,a,GALRM,cAYNK,O,8ICFKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC3B,EAAA,EAAD,OAEF4B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef8d0f84.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport Keypad from './keypad';\nimport classes from './App.css';\nimport Output from './output'\n\nclass App extends Component {\n\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tresult: \"\",\n\t\t}\n\n\t}\n\n\tcalculate()\n\t{\n\t\tthis.setState({\n\t\t\tresult:(eval(this.state.result)||\"\"),\n\t\t})\n\t}\n\treset()\n\t{\n\t\tthis.setState({\n\t\t\tresult:\"\",\n\t\t})\n\t}\n\tbackspace()\n\t{\n\t\tthis.setState({\n\t\tresult: this.state.result.slice(0,-1),   \n\t\t})\n\t}\n    \n    onClick=button=>{\n    \tif(button==='=')\n    \t{\n    \t\tthis.calculate();\n    \t}\n    \telse if(button==='CE')\n    \t{\n    \t\tthis.reset();\n    \t}\n    \telse if(button==='C')\n    \t{\n    \t\tthis.backspace();\n    \t}\n    \telse{\n    \t\tthis.setState({\n    \t\t\tresult:this.state.result+button,\n    \t\t})\n    \t}\n    };\n  \n  render(){\n\n    return (\n   <div className='App'>  \n   <h1>CALCULATOR</h1>                               \n   <div className='container' >\n   <Output result={this.state.result} className='classes.btn' />  {/*the component name must start with uppercases*/}\n   <Keypad onClick={this.onClick} className='classes.btn'/>\n   </div>\n   </div>\n  );\n\n  }\n  \n}\n\nexport default App;\n","import React,{Component} from 'react'\r\nimport  './App.css';\r\nclass keypad extends Component{\r\n  \r\n\r\n   \r\n\trender(){\r\n\t\treturn(\r\n             <div className='btn'>\r\n             \r\n             <button name='1' onClick={e=> this.props.onClick(e.target.name)}>1</button>\r\n             <button name='2' onClick={e=> this.props.onClick(e.target.name)}>2</button>\r\n             <button name='3' onClick={e=> this.props.onClick(e.target.name)}>3</button>\r\n              <button name='+' onClick={e=> this.props.onClick(e.target.name)}>+</button>\r\n             \r\n             <button name='4' onClick={e=> this.props.onClick(e.target.name)}>4</button>\r\n             <button name='5' onClick={e=> this.props.onClick(e.target.name)}>5</button>\r\n             <button name='6' onClick={e=> this.props.onClick(e.target.name)}>6</button>\r\n             <button name='-' onClick={e=> this.props.onClick(e.target.name)}>-</button>\r\n\r\n             <button name='7' onClick={e=> this.props.onClick(e.target.name)}>7</button>\r\n             \r\n            \r\n             <button name='8' onClick={e=> this.props.onClick(e.target.name)} >8</button>\r\n             <button name='9' onClick={e=> this.props.onClick(e.target.name)}>9</button>\r\n            \r\n             \r\n             \r\n             \r\n             <button name=\"/\" onClick={e=> this.props.onClick(e.target.name)}>/</button>                          \r\n             <button name='C'  onClick={e=> this.props.onClick(e.target.name)}>C</button>\r\n             \r\n             \r\n             <button name='0' onClick={e=> this.props.onClick(e.target.name)}>0</button>\r\n             <button name='CE'  onClick={e=> this.props.onClick(e.target.name)}>CE</button>\r\n             <button name='*' onClick={e=> this.props.onClick(e.target.name)}>*</button>\r\n             <button name='=' onClick={e=> this.props.onClick(e.target.name)}>=</button>\r\n             \r\n\r\n             \r\n             </div>\r\n\r\n\t\t\t);\r\n\t}\r\n\r\n  }\r\nexport default keypad;","import React,{Component} from 'react'\r\nimport './App.css'\r\nclass output extends Component{\r\n\r\n\trender(){\r\n\t\treturn(\r\n             <div className=\"result\">\r\n              <p>{this.props.result}</p>\r\n             </div>\r\n\r\n\t\t\t);\r\n\t}\r\n\r\n  }\r\nexport default output","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}